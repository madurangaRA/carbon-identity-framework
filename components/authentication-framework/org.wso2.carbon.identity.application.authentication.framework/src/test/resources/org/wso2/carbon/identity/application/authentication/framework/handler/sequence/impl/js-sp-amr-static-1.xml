<!--
  ~ Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
<ServiceProvider>
    <ApplicationID>1</ApplicationID>
    <ApplicationName>default</ApplicationName>
    <Description>Default Service Provider</Description>
    <InboundAuthenticationConfig>
        <InboundAuthenticationRequestConfigs>
            <InboundAuthenticationRequestConfig>
                <InboundAuthKey>default</InboundAuthKey>
                <InboundAuthType></InboundAuthType>
                <Properties></Properties>
            </InboundAuthenticationRequestConfig>
        </InboundAuthenticationRequestConfigs>
    </InboundAuthenticationConfig>
    <LocalAndOutBoundAuthenticationConfig>
        <AuthenticationSteps>
            <AuthenticationStep>
                <StepOrder>0</StepOrder>
                <LocalAuthenticatorConfigs>
                    <LocalAuthenticatorConfig>
                        <Name>BasicMockAuthenticator</Name>
                        <DisplayName>basicauth</DisplayName>
                        <IsEnabled>true</IsEnabled>
                    </LocalAuthenticatorConfig>
                </LocalAuthenticatorConfigs>
                <SubjectStep>true</SubjectStep>
                <AttributeStep>true</AttributeStep>
            </AuthenticationStep>
            <AuthenticationStep>
                <StepOrder>1</StepOrder>
                <FederatedIdentityProviders>
                    <IdentityProvider>
                        <IdentityProviderName>HwkMockAuthenticator</IdentityProviderName>
                        <IsEnabled>true</IsEnabled>
                        <DefaultAuthenticatorConfig>HwkMockAuthenticator</DefaultAuthenticatorConfig>
                        <FederatedAuthenticatorConfigs>
                            <FederatedAuthenticatorConfig>
                                <Name>HwkMockAuthenticator</Name>
                                <IsEnabled>true</IsEnabled>
                            </FederatedAuthenticatorConfig>
                        </FederatedAuthenticatorConfigs>
                    </IdentityProvider>
                </FederatedIdentityProviders>
                <SubjectStep>fales</SubjectStep>
                <AttributeStep>false</AttributeStep>
            </AuthenticationStep>
            <AuthenticationStep>
                <StepOrder>2</StepOrder>
                <FederatedIdentityProviders>
                    <IdentityProvider>
                        <IdentityProviderName>FptMockAuthenticator</IdentityProviderName>
                        <IsEnabled>true</IsEnabled>
                        <DefaultAuthenticatorConfig>FptMockAuthenticator</DefaultAuthenticatorConfig>
                        <FederatedAuthenticatorConfigs>
                            <FederatedAuthenticatorConfig>
                                <Name>FptMockAuthenticator</Name>
                                <IsEnabled>true</IsEnabled>
                            </FederatedAuthenticatorConfig>
                        </FederatedAuthenticatorConfigs>
                    </IdentityProvider>
                </FederatedIdentityProviders>
                <SubjectStep>fales</SubjectStep>
                <AttributeStep>false</AttributeStep>
            </AuthenticationStep>
        </AuthenticationSteps>
        <AuthenticationScript type="javascript"><![CDATA[

function(context) {
    var amrArray = getRequestedAmr(context);
    log.debug("AMR requested "+amrArray);

    for (var i = 0, len = amrArray.length; i < len; i++) {
        var amr = amrArray[i];
        log.debug("Adding AMR "+amr);
        switch(amr) {
            case "pwd" : execute('0'); break;
            case "hwk" : execute('1'); break;
            case "fpt" : execute('2'); break;
            default :
                log.error("Unknown AMR requested. Authentication fails amr: "+amr);
                fail("Could not find Authenticator for amr: "+amr);
                //fail(i18n("Could not find Authenticator for amr: "+amr, "no.amr.for", amr));
        }
    }
}

]]></AuthenticationScript>
    </LocalAndOutBoundAuthenticationConfig>
    <RequestPathAuthenticatorConfigs></RequestPathAuthenticatorConfigs>
    <InboundProvisioningConfig></InboundProvisioningConfig>
    <OutboundProvisioningConfig></OutboundProvisioningConfig>
    <ClaimConfig>
        <AlwaysSendMappedLocalSubjectId>true</AlwaysSendMappedLocalSubjectId>
    </ClaimConfig>
    <PermissionAndRoleConfig></PermissionAndRoleConfig>
</ServiceProvider>
